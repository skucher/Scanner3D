<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>

<title>Vector3DEx Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.html"><span>Class&#160;List</span></a></li>
      <li><a href="classes.html"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.html"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">Vector3DEx Class Reference</div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="Vector3DEx" --><!-- doxytag: inherits="Vector3D" -->
<p><a class="el" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a> is extendex <a class="el" href="class_vector3_d.html" title="Vector3D is vector 3D representation.">Vector3D</a>: needed for performance improval its lenght calculated only once on creation.  
 <a href="class_vector3_d_ex.html#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_vector3_d_ex_8h_source.html">Vector3DEx.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for Vector3DEx:</div>
<div class="dyncontent">
 <div class="center">
  <img src="class_vector3_d_ex.png" usemap="#Vector3DEx_map" alt=""/>
  <map id="Vector3DEx_map" name="Vector3DEx_map">
<area href="class_vector3_d.html" title="Vector3D is vector 3D representation." alt="Vector3D" shape="rect" coords="0,0,80,24"/>
</map>
 </div></div>

<p><a href="class_vector3_d_ex-members.html">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aceae970089efcc5905fdd8974229723a"></a><!-- doxytag: member="Vector3DEx::Vector3DEx" ref="aceae970089efcc5905fdd8974229723a" args="(void)" -->
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#aceae970089efcc5905fdd8974229723a">Vector3DEx</a> (void)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">parameterless constructor <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#a1ccf108a71ea6d10e352ad64f1f93e1e">Vector3DEx</a> (float x, float y, float z)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">constructor:  <a href="#a1ccf108a71ea6d10e352ad64f1f93e1e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0007aa7e71ef71287c1eaf39279f43a4"></a><!-- doxytag: member="Vector3DEx::Vector3DEx" ref="a0007aa7e71ef71287c1eaf39279f43a4" args="(const Vector3D &amp;other)" -->
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#a0007aa7e71ef71287c1eaf39279f43a4">Vector3DEx</a> (const <a class="el" href="class_vector3_d.html">Vector3D</a> &amp;other)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">copy constuctor <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aebdc4f9446de9f53cb506de2728df751"></a><!-- doxytag: member="Vector3DEx::~Vector3DEx" ref="aebdc4f9446de9f53cb506de2728df751" args="(void)" -->
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#aebdc4f9446de9f53cb506de2728df751">~Vector3DEx</a> (void)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">destructor <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#ad8b4a799644b0f782b10958e22714ae1">angle</a> (<a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;other)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#ad8e80f3a4eadae291e6922f0fa0d3b4e">length</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3fa686072da303150979b9e5008472dc"></a><!-- doxytag: member="Vector3DEx::normalize" ref="a3fa686072da303150979b9e5008472dc" args="()" -->
<a class="el" href="class_vector3_d_ex.html">Vector3DEx</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#a3fa686072da303150979b9e5008472dc">normalize</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">normalizes the vector <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_vector3_d_ex.html">Vector3DEx</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#a5c91fe29f5d01e8ee420d65490322ba5">crossProduct</a> (<a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;other)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#a46c89c6993dbc4ee39339ce3d79fb4d7">operator&lt;</a> (const <a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;other) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#a5d8c62665556e71e9bfefd493a353d90">operator==</a> (const <a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;other) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#a1de80421490ca6fe2e35c51614156e88">operator!=</a> (const <a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;other) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#ad2141ea943c3f76f141611c45f31a051">operator&gt;</a> (const <a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;other) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_vector3_d_ex.html">Vector3DEx</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#a82c088887b7106844bea7d935dbe1266">operator-</a> (const <a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;other) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_vector3_d_ex.html">Vector3DEx</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#a103f6d1d6283f307e1b1f6d1c2f39c1a">operator+</a> (const <a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;other) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#a0752326d1725e6d0c0ee35185d2900f9">operator+=</a> (const <a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;other)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">this = this+other  <a href="#a0752326d1725e6d0c0ee35185d2900f9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#a14bc2814914822c10d9ca1417a1815c6">operator-=</a> (const <a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;other)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">this = this-other  <a href="#a14bc2814914822c10d9ca1417a1815c6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#a0d213234685d334eed0f02edbc8856cd">operator*=</a> (float alpha)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">this = this * alpha  <a href="#a0d213234685d334eed0f02edbc8856cd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#a29ee00c9bc3847507ecbe0989be539ba">operator*</a> (const <a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;other) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="class_vector3_d_ex.html">Vector3DEx</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_vector3_d_ex.html#acc8ec2817fc452cae55fbe3c6177d7b1">operator*</a> (float alpha) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa4fb859d3eb2ee1b0376f5d08d9314a4"></a><!-- doxytag: member="Vector3DEx::getX" ref="aa4fb859d3eb2ee1b0376f5d08d9314a4" args="()" -->
float&#160;</td><td class="memItemRight" valign="bottom"><b>getX</b> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1b6ec052467f90639745718ad729ed2c"></a><!-- doxytag: member="Vector3DEx::getY" ref="a1b6ec052467f90639745718ad729ed2c" args="()" -->
float&#160;</td><td class="memItemRight" valign="bottom"><b>getY</b> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1f0f1d4f20d08a3ca1332042fddad1e8"></a><!-- doxytag: member="Vector3DEx::getZ" ref="a1f0f1d4f20d08a3ca1332042fddad1e8" args="()" -->
float&#160;</td><td class="memItemRight" valign="bottom"><b>getZ</b> ()</td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0683c9fae97c4cb243fe40bfad8b126d"></a><!-- doxytag: member="Vector3DEx::vectorLength" ref="a0683c9fae97c4cb243fe40bfad8b126d" args="" -->
float&#160;</td><td class="memItemRight" valign="bottom"><b>vectorLength</b></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p><a class="el" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a> is extendex <a class="el" href="class_vector3_d.html" title="Vector3D is vector 3D representation.">Vector3D</a>: needed for performance improval its lenght calculated only once on creation. </p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a1ccf108a71ea6d10e352ad64f1f93e1e"></a><!-- doxytag: member="Vector3DEx::Vector3DEx" ref="a1ccf108a71ea6d10e352ad64f1f93e1e" args="(float x, float y, float z)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Vector3DEx::Vector3DEx </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>constructor: </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">x,:</td><td>x location </td></tr>
    <tr><td class="paramname">y,:</td><td>y location </td></tr>
    <tr><td class="paramname">z,:</td><td>z location </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ad8b4a799644b0f782b10958e22714ae1"></a><!-- doxytag: member="Vector3DEx::angle" ref="ad8b4a799644b0f782b10958e22714ae1" args="(Vector3DEx &amp;other)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float Vector3DEx::angle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">other,:</td><td>the <a class="el" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a> to perform the operation </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>angle between this and other </dd></dl>

</div>
</div>
<a class="anchor" id="a5c91fe29f5d01e8ee420d65490322ba5"></a><!-- doxytag: member="Vector3DEx::crossProduct" ref="a5c91fe29f5d01e8ee420d65490322ba5" args="(Vector3DEx &amp;other)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> Vector3DEx::crossProduct </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">other,:</td><td>the <a class="el" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a> to perform the operation </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>cross product <a class="el" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a> between this and other </dd></dl>

</div>
</div>
<a class="anchor" id="ad8e80f3a4eadae291e6922f0fa0d3b4e"></a><!-- doxytag: member="Vector3DEx::length" ref="ad8e80f3a4eadae291e6922f0fa0d3b4e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float Vector3DEx::length </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>vector length </dd></dl>

</div>
</div>
<a class="anchor" id="a1de80421490ca6fe2e35c51614156e88"></a><!-- doxytag: member="Vector3DEx::operator!=" ref="a1de80421490ca6fe2e35c51614156e88" args="(const Vector3DEx &amp;other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Vector3DEx::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">other,:</td><td>the <a class="el" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a> to perform the operation </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>if this not equal to other in x or y or z </dd></dl>

</div>
</div>
<a class="anchor" id="a29ee00c9bc3847507ecbe0989be539ba"></a><!-- doxytag: member="Vector3DEx::operator*" ref="a29ee00c9bc3847507ecbe0989be539ba" args="(const Vector3DEx &amp;other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float Vector3DEx::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">other,:</td><td>the <a class="el" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a> to perform the operation </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>this product other </dd></dl>

</div>
</div>
<a class="anchor" id="acc8ec2817fc452cae55fbe3c6177d7b1"></a><!-- doxytag: member="Vector3DEx::operator*" ref="acc8ec2817fc452cae55fbe3c6177d7b1" args="(float alpha) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> Vector3DEx::operator* </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>alpha</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">other,:</td><td>the <a class="el" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a> to perform the operation </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>this * alpha. (x*alpha,y*alpha,z*alpha) </dd></dl>

<p>Reimplemented from <a class="el" href="class_vector3_d.html#a7c02986f1641e3a086e547358bb95325">Vector3D</a>.</p>

</div>
</div>
<a class="anchor" id="a0d213234685d334eed0f02edbc8856cd"></a><!-- doxytag: member="Vector3DEx::operator*=" ref="a0d213234685d334eed0f02edbc8856cd" args="(float alpha)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp; Vector3DEx::operator*= </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>alpha</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>this = this * alpha </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">other,:</td><td>the <a class="el" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a> to perform the operation </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>this </dd></dl>

<p>Reimplemented from <a class="el" href="class_vector3_d.html#a47ff89a047f61471490179dd7ff434e0">Vector3D</a>.</p>

</div>
</div>
<a class="anchor" id="a103f6d1d6283f307e1b1f6d1c2f39c1a"></a><!-- doxytag: member="Vector3DEx::operator+" ref="a103f6d1d6283f307e1b1f6d1c2f39c1a" args="(const Vector3DEx &amp;other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> Vector3DEx::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">other,:</td><td>the <a class="el" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a> to perform the operation </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>this+other x1+x2,y1+y2,z1+z2 </dd></dl>

</div>
</div>
<a class="anchor" id="a0752326d1725e6d0c0ee35185d2900f9"></a><!-- doxytag: member="Vector3DEx::operator+=" ref="a0752326d1725e6d0c0ee35185d2900f9" args="(const Vector3DEx &amp;other)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp; Vector3DEx::operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>this = this+other </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">other,:</td><td>the <a class="el" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a> to perform the operation </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>this </dd></dl>

</div>
</div>
<a class="anchor" id="a82c088887b7106844bea7d935dbe1266"></a><!-- doxytag: member="Vector3DEx::operator&#45;" ref="a82c088887b7106844bea7d935dbe1266" args="(const Vector3DEx &amp;other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> Vector3DEx::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">other,:</td><td>the <a class="el" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a> to perform the operation </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>this-other x1-x2,y1-y2,z1-z2 </dd></dl>

</div>
</div>
<a class="anchor" id="a14bc2814914822c10d9ca1417a1815c6"></a><!-- doxytag: member="Vector3DEx::operator&#45;=" ref="a14bc2814914822c10d9ca1417a1815c6" args="(const Vector3DEx &amp;other)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp; Vector3DEx::operator-= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>this = this-other </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">other,:</td><td>the <a class="el" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a> to perform the operation </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>this </dd></dl>

</div>
</div>
<a class="anchor" id="a46c89c6993dbc4ee39339ce3d79fb4d7"></a><!-- doxytag: member="Vector3DEx::operator&lt;" ref="a46c89c6993dbc4ee39339ce3d79fb4d7" args="(const Vector3DEx &amp;other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Vector3DEx::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">other,:</td><td>the <a class="el" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a> to perform the operation </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>if this less the other in (x,y,z) preference order </dd></dl>

</div>
</div>
<a class="anchor" id="a5d8c62665556e71e9bfefd493a353d90"></a><!-- doxytag: member="Vector3DEx::operator==" ref="a5d8c62665556e71e9bfefd493a353d90" args="(const Vector3DEx &amp;other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Vector3DEx::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">other,:</td><td>the <a class="el" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a> to perform the operation </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>if this equal other x and y and z </dd></dl>

</div>
</div>
<a class="anchor" id="ad2141ea943c3f76f141611c45f31a051"></a><!-- doxytag: member="Vector3DEx::operator&gt;" ref="ad2141ea943c3f76f141611c45f31a051" args="(const Vector3DEx &amp;other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Vector3DEx::operator&gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_vector3_d_ex.html">Vector3DEx</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">other,:</td><td>the <a class="el" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a> to perform the operation </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>if this greater the other in (x,y,z) preference order </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>src/Sculptor/<a class="el" href="_vector3_d_ex_8h_source.html">Vector3DEx.h</a></li>
<li>src/Sculptor/Vector3DEx.cpp</li>
</ul>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Properties</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Friends</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Wed Nov 30 2011 17:10:15 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.5.1
</small></address>

</body>
</html>

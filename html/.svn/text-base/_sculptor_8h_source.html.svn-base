<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>

<title>src/Sculptor/Sculptor.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<!-- Generated by Doxygen 1.7.5.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">src/Sculptor/Sculptor.h</div>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#pragma once</span>
<a name="l00002"></a>00002 <span class="preprocessor"></span>
<a name="l00003"></a>00003 <span class="preprocessor">#include &quot;Mesh.h&quot;</span>
<a name="l00004"></a>00004 <span class="preprocessor">#include &quot;SculptData.h&quot;</span>
<a name="l00005"></a>00005 <span class="preprocessor">#include &quot;Vector2D.h&quot;</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &quot;MeshMargins.h&quot;</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &quot;Edge.h&quot;</span>
<a name="l00008"></a>00008 
<a name="l00009"></a>00009 <span class="preprocessor">#define FULLCELL        (0xFF)</span>
<a name="l00010"></a>00010 <span class="preprocessor"></span>
<a name="l00011"></a>00011 <span class="preprocessor">#define INSHAPE         (1.0f)</span>
<a name="l00012"></a>00012 <span class="preprocessor"></span><span class="preprocessor">#define OUTSAHPE        (0.0f)</span>
<a name="l00013"></a>00013 <span class="preprocessor"></span>
<a name="l00014"></a>00014 <span class="preprocessor">#define TO_SHAPE_THRESHOLD  1</span>
<a name="l00015"></a>00015 <span class="preprocessor"></span>
<a name="l00016"></a>00016 <span class="keyword">typedef</span> <span class="keyword">enum</span> {
<a name="l00017"></a>00017     BLACK = 1, BLUE = 2,
<a name="l00018"></a>00018     WHITE = 3, RED = 4,
<a name="l00019"></a>00019     OUTSIDE = 5
<a name="l00020"></a>00020 } VoxelStatus;
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="keyword">typedef</span> <span class="keyword">enum</span>
<a name="l00023"></a>00023 {
<a name="l00024"></a>00024     FAST,
<a name="l00025"></a>00025     ACCURATE
<a name="l00026"></a>00026 }SculptorMode;
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="keyword">static</span> <span class="keywordtype">char</span> pointOffsetArray[8][3] =
<a name="l00029"></a>00029 {
<a name="l00030"></a>00030         {0,0,0},
<a name="l00031"></a>00031         {0,1,0},
<a name="l00032"></a>00032         {1,1,0},
<a name="l00033"></a>00033         {1,0,0},
<a name="l00034"></a>00034         {0,0,1},
<a name="l00035"></a>00035         {0,1,1},
<a name="l00036"></a>00036         {1,1,1},
<a name="l00037"></a>00037         {1,0,1},
<a name="l00038"></a>00038 };
<a name="l00039"></a>00039 
<a name="l00046"></a>00046 <span class="keyword">template</span>&lt;<span class="keywordtype">int</span> Size&gt;
<a name="l00047"></a><a class="code" href="class_sculptor.html">00047</a> <span class="keyword">class </span><a class="code" href="class_sculptor.html" title="Sculptor: is template class where template argument is its size  Sculptor holds 3D shape representati...">Sculptor</a>
<a name="l00048"></a>00048 {
<a name="l00049"></a>00049 <span class="keyword">public</span>:
<a name="l00054"></a><a class="code" href="class_sculptor.html#aca9204b989d39026a4cd523227d40067">00054</a>         <a class="code" href="class_sculptor.html#aca9204b989d39026a4cd523227d40067" title="The sculpture is initialised to be SIZE * SIZE * SIZE cube.">Sculptor</a>(<span class="keywordtype">float</span> _scaleRate, <span class="keyword">const</span> <a class="code" href="class_vector3_d.html" title="Vector3D is vector 3D representation.">Vector3D</a>&amp; translation)
<a name="l00055"></a>00055         {
<a name="l00056"></a>00056         scaleRate = _scaleRate / Size;<span class="comment">//0.2463 ;</span>
<a name="l00057"></a>00057         translationRateX = translation.getX();<span class="comment">//-0.1307;</span>
<a name="l00058"></a>00058         translationRateY = translation.getY();<span class="comment">//-0.1307;</span>
<a name="l00059"></a>00059         translationRateZ = translation.getZ();<span class="comment">//-0.7483;</span>
<a name="l00060"></a>00060         
<a name="l00061"></a>00061                 <a class="code" href="class_sculptor.html#ab376e9423eea844a4f85417c19ac77ee" title="Resets the structure to full cube.">Reset</a>();
<a name="l00062"></a>00062         }
<a name="l00063"></a>00063 
<a name="l00064"></a>00064 
<a name="l00065"></a>00065         ~<a class="code" href="class_sculptor.html" title="Sculptor: is template class where template argument is its size  Sculptor holds 3D shape representati...">Sculptor</a>(<span class="keywordtype">void</span>) 
<a name="l00066"></a>00066         {
<a name="l00067"></a>00067         }
<a name="l00068"></a>00068     
<a name="l00074"></a><a class="code" href="class_sculptor.html#add308e168244fa0d07d2856af5c43b0c">00074</a>     <span class="keywordtype">void</span> <a class="code" href="class_sculptor.html#add308e168244fa0d07d2856af5c43b0c">Sculp</a>(<a class="code" href="struct_sculpt_data.html" title="The struct represents data to be sculped.">SculptData</a>* sculpData, SculptorMode mode = ACCURATE)
<a name="l00075"></a>00075     {
<a name="l00076"></a>00076         <span class="keywordflow">if</span>(mode == ACCURATE)
<a name="l00077"></a>00077         {
<a name="l00078"></a>00078             SculpAccurate(sculpData);
<a name="l00079"></a>00079             <span class="keywordflow">return</span>;
<a name="l00080"></a>00080         }
<a name="l00081"></a>00081         <span class="keywordflow">if</span>(mode == FAST)
<a name="l00082"></a>00082         {
<a name="l00083"></a>00083             SculpFast(sculpData);
<a name="l00084"></a>00084             <span class="keywordflow">return</span>;
<a name="l00085"></a>00085         }
<a name="l00086"></a>00086     }
<a name="l00087"></a>00087     
<a name="l00089"></a><a class="code" href="class_sculptor.html#ab376e9423eea844a4f85417c19ac77ee">00089</a>     <span class="keywordtype">void</span> <a class="code" href="class_sculptor.html#ab376e9423eea844a4f85417c19ac77ee" title="Resets the structure to full cube.">Reset</a>()
<a name="l00090"></a>00090     {
<a name="l00091"></a>00091         <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> x = 0; x &lt; Size ; x++)
<a name="l00092"></a>00092                         <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> y = 0; y &lt; Size ; y++)
<a name="l00093"></a>00093                                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> z = 0; z &lt; Size &gt;&gt; 3; z++)
<a name="l00094"></a>00094                                         sculpture[x][y][z] = FULLCELL;
<a name="l00095"></a>00095         meshMargins.Reset();
<a name="l00096"></a>00096     }
<a name="l00097"></a>00097     
<a name="l00099"></a><a class="code" href="class_sculptor.html#a70a33030993ca5aff496d80e819adb3e">00099</a>         <span class="keywordtype">void</span> <a class="code" href="class_sculptor.html#a70a33030993ca5aff496d80e819adb3e" title="Generate triangle mesh from 3D object.">ToShape</a>(SculptorMode mode = ACCURATE,<span class="keywordtype">float</span> scaleConstant = 1)
<a name="l00100"></a>00100         {
<a name="l00101"></a>00101         mesh.<a class="code" href="class_mesh.html#a85427cf326e76c4a9ba5f808f8827000" title="Clear mesh contents.">Clear</a>();
<a name="l00102"></a>00102         byte minX = meshMargins.GetMinX();
<a name="l00103"></a>00103         byte maxX = meshMargins.GetMaxX();
<a name="l00104"></a>00104         
<a name="l00105"></a>00105                 <span class="keywordflow">for</span>(<span class="keywordtype">char</span> x = GetMin(minX,mode); x &lt;= GetMax(maxX,mode); x++)
<a name="l00106"></a>00106                 {
<a name="l00107"></a>00107             byte minYPerX = meshMargins.GetMinYPerX(x);
<a name="l00108"></a>00108             byte maxYPerX = meshMargins.GetMaxYPerX(x);
<a name="l00109"></a>00109             
<a name="l00110"></a>00110                         <span class="keywordflow">for</span>(<span class="keywordtype">char</span> y = GetMin(minYPerX,mode); y &lt;= GetMax(maxYPerX,mode); y++)
<a name="l00111"></a>00111                         {
<a name="l00112"></a>00112                 byte minZPerXY = meshMargins.GetMinZPerXY(x,y);
<a name="l00113"></a>00113                 byte maxZPerXY = meshMargins.GetMaxZPerXY(x,y);
<a name="l00114"></a>00114                 
<a name="l00115"></a>00115                                 <span class="keywordflow">for</span>(<span class="keywordtype">char</span> z = GetMin(minZPerXY,mode); z &lt;= GetMax(maxZPerXY,mode); z++)
<a name="l00116"></a>00116                                 {
<a name="l00117"></a>00117                                         PoligolizeCell(x,y,z,mode);     
<a name="l00118"></a>00118                                 }
<a name="l00119"></a>00119                         }
<a name="l00120"></a>00120                 }
<a name="l00121"></a>00121         mesh.<a class="code" href="class_mesh.html#a0bcbcfab416aa932c2ac7af5108da734" title="Converts the mesh to Shape format that can be displayed in OPENGL.">ToShape</a>(scaleConstant);
<a name="l00122"></a>00122         }
<a name="l00123"></a>00123     
<a name="l00125"></a><a class="code" href="class_sculptor.html#ad32b0f2a5edaed5f1bbe92391c9a648c">00125</a>     <span class="keywordtype">void</span> <a class="code" href="class_sculptor.html#ad32b0f2a5edaed5f1bbe92391c9a648c" title="Gets the outline of the cube.">CreateOutline</a>()
<a name="l00126"></a>00126     {
<a name="l00127"></a>00127         <span class="keywordtype">int</span> size = 12;
<a name="l00128"></a>00128         <a class="code" href="class_edge.html" title="Edge: Represents line connected between two Vector3DEx.">Edge</a>* edges = <span class="keyword">new</span> <a class="code" href="class_edge.html" title="Edge: Represents line connected between two Vector3DEx.">Edge</a>[size];
<a name="l00129"></a>00129         
<a name="l00130"></a>00130         edges[0].<a class="code" href="class_edge.html#a6d449132fa4741af6818d205df6746a6" title="first vector">first</a>  = GetVectorPosition(0       ,   0       ,   0       ); 
<a name="l00131"></a>00131         edges[0].<a class="code" href="class_edge.html#ae2e12d1ff2b65dc08d6d460101199e5e" title="second vector">second</a> = GetVectorPosition(0       ,   Size - 1,   0       ); 
<a name="l00132"></a>00132         
<a name="l00133"></a>00133         edges[1].<a class="code" href="class_edge.html#a6d449132fa4741af6818d205df6746a6" title="first vector">first</a>  = GetVectorPosition(0       ,   0       ,   0       ); 
<a name="l00134"></a>00134         edges[1].<a class="code" href="class_edge.html#ae2e12d1ff2b65dc08d6d460101199e5e" title="second vector">second</a> = GetVectorPosition(Size - 1,   0       ,   0       );
<a name="l00135"></a>00135         
<a name="l00136"></a>00136         edges[2].<a class="code" href="class_edge.html#a6d449132fa4741af6818d205df6746a6" title="first vector">first</a>  = GetVectorPosition(0       ,   0       ,   0       ); 
<a name="l00137"></a>00137         edges[2].<a class="code" href="class_edge.html#ae2e12d1ff2b65dc08d6d460101199e5e" title="second vector">second</a> = GetVectorPosition(0       ,   0       ,   Size - 1);
<a name="l00138"></a>00138         
<a name="l00139"></a>00139         edges[3].<a class="code" href="class_edge.html#a6d449132fa4741af6818d205df6746a6" title="first vector">first</a>  = GetVectorPosition(Size - 1,   Size - 1,   0       ); 
<a name="l00140"></a>00140         edges[3].<a class="code" href="class_edge.html#ae2e12d1ff2b65dc08d6d460101199e5e" title="second vector">second</a> = GetVectorPosition(0       ,   Size - 1,   0       );
<a name="l00141"></a>00141         
<a name="l00142"></a>00142         edges[4].<a class="code" href="class_edge.html#a6d449132fa4741af6818d205df6746a6" title="first vector">first</a>  = GetVectorPosition(Size - 1,   Size - 1,   0       ); 
<a name="l00143"></a>00143         edges[4].<a class="code" href="class_edge.html#ae2e12d1ff2b65dc08d6d460101199e5e" title="second vector">second</a> = GetVectorPosition(Size - 1,   0       ,   0       );
<a name="l00144"></a>00144         
<a name="l00145"></a>00145         edges[5].<a class="code" href="class_edge.html#a6d449132fa4741af6818d205df6746a6" title="first vector">first</a>  = GetVectorPosition(Size - 1,   Size - 1,   0       ); 
<a name="l00146"></a>00146         edges[5].<a class="code" href="class_edge.html#ae2e12d1ff2b65dc08d6d460101199e5e" title="second vector">second</a> = GetVectorPosition(Size - 1,   Size - 1,   Size - 1);
<a name="l00147"></a>00147         
<a name="l00148"></a>00148         edges[6].<a class="code" href="class_edge.html#a6d449132fa4741af6818d205df6746a6" title="first vector">first</a>  = GetVectorPosition(Size - 1,   0       ,   Size - 1); 
<a name="l00149"></a>00149         edges[6].<a class="code" href="class_edge.html#ae2e12d1ff2b65dc08d6d460101199e5e" title="second vector">second</a> = GetVectorPosition(Size - 1,   0       ,   0       );
<a name="l00150"></a>00150         
<a name="l00151"></a>00151         edges[7].<a class="code" href="class_edge.html#a6d449132fa4741af6818d205df6746a6" title="first vector">first</a>  = GetVectorPosition(Size - 1,   0       ,   Size - 1); 
<a name="l00152"></a>00152         edges[7].<a class="code" href="class_edge.html#ae2e12d1ff2b65dc08d6d460101199e5e" title="second vector">second</a> = GetVectorPosition(Size - 1,   Size - 1,   Size - 1);
<a name="l00153"></a>00153         
<a name="l00154"></a>00154         edges[8].<a class="code" href="class_edge.html#a6d449132fa4741af6818d205df6746a6" title="first vector">first</a>  = GetVectorPosition(Size - 1,   0       ,   Size - 1); 
<a name="l00155"></a>00155         edges[8].<a class="code" href="class_edge.html#ae2e12d1ff2b65dc08d6d460101199e5e" title="second vector">second</a> = GetVectorPosition(0       ,   0       ,   Size - 1);
<a name="l00156"></a>00156         
<a name="l00157"></a>00157         edges[9].<a class="code" href="class_edge.html#a6d449132fa4741af6818d205df6746a6" title="first vector">first</a>  = GetVectorPosition(0       ,   Size - 1,   Size - 1); 
<a name="l00158"></a>00158         edges[9].<a class="code" href="class_edge.html#ae2e12d1ff2b65dc08d6d460101199e5e" title="second vector">second</a> = GetVectorPosition(0       ,   Size - 1,   0       );
<a name="l00159"></a>00159         
<a name="l00160"></a>00160         edges[10].<a class="code" href="class_edge.html#a6d449132fa4741af6818d205df6746a6" title="first vector">first</a>  = GetVectorPosition(0       ,   Size - 1,   Size - 1); 
<a name="l00161"></a>00161         edges[10].<a class="code" href="class_edge.html#ae2e12d1ff2b65dc08d6d460101199e5e" title="second vector">second</a> = GetVectorPosition(Size - 1,   Size - 1,   Size - 1);
<a name="l00162"></a>00162         
<a name="l00163"></a>00163         edges[11].<a class="code" href="class_edge.html#a6d449132fa4741af6818d205df6746a6" title="first vector">first</a>  = GetVectorPosition(0       ,   Size - 1,   Size - 1); 
<a name="l00164"></a>00164         edges[11].<a class="code" href="class_edge.html#ae2e12d1ff2b65dc08d6d460101199e5e" title="second vector">second</a> = GetVectorPosition(0       ,   0       ,   Size - 1);
<a name="l00165"></a>00165         
<a name="l00166"></a>00166         <a class="code" href="class_shape.html#a8a101dccadb88b7369deab93d8456187" title="getInstance method">Shape::getInstance</a>().setOutline(edges,size);   
<a name="l00167"></a>00167     }
<a name="l00168"></a>00168     
<a name="l00169"></a>00169         <span class="keyword">protected</span>:
<a name="l00170"></a>00170                 
<a name="l00171"></a>00171                 <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> sculpture[Size][Size][Size&gt;&gt;3];
<a name="l00172"></a>00172         <a class="code" href="class_mesh_margins.html" title="MeshMargins represents margines for 3D structure: 1.">MeshMargins&lt;Size&gt;</a> meshMargins;
<a name="l00173"></a>00173                 <a class="code" href="class_mesh.html" title="Mesh is a class that holds 3D mesh.">Mesh</a> mesh;
<a name="l00174"></a>00174                 
<a name="l00175"></a>00175         <span class="keywordtype">float</span> scaleRate;
<a name="l00176"></a>00176         <span class="keywordtype">float</span> translationRateX;
<a name="l00177"></a>00177         <span class="keywordtype">float</span> translationRateY;
<a name="l00178"></a>00178         <span class="keywordtype">float</span> translationRateZ;
<a name="l00179"></a>00179             
<a name="l00180"></a>00180         <span class="keywordtype">void</span> SculpFast(<a class="code" href="struct_sculpt_data.html" title="The struct represents data to be sculped.">SculptData</a>* sculpData)
<a name="l00181"></a>00181         {
<a name="l00182"></a>00182             byte minX = meshMargins.GetMinX();
<a name="l00183"></a>00183             byte maxX = meshMargins.GetMaxX();
<a name="l00184"></a>00184             
<a name="l00185"></a>00185             byte minXnew = meshMargins.GetMinX();
<a name="l00186"></a>00186             byte maxXnew = meshMargins.GetMaxX();
<a name="l00187"></a>00187             
<a name="l00188"></a>00188             <span class="keywordtype">bool</span> minXDirty = <span class="keyword">false</span>;
<a name="l00189"></a>00189             
<a name="l00190"></a>00190             <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> x = minX; x &lt;= maxX ; x++)
<a name="l00191"></a>00191             {
<a name="l00192"></a>00192                 byte minYPerX = meshMargins.GetMinYPerX(x);
<a name="l00193"></a>00193                 byte maxYPerX = meshMargins.GetMaxYPerX(x);
<a name="l00194"></a>00194                 
<a name="l00195"></a>00195                 byte minYPerXnew = meshMargins.GetMinYPerX(x);
<a name="l00196"></a>00196                 byte maxYPerXnew = meshMargins.GetMaxYPerX(x);
<a name="l00197"></a>00197                 
<a name="l00198"></a>00198                 <span class="keywordtype">bool</span> minYPerXDirty = <span class="keyword">false</span>;
<a name="l00199"></a>00199                 
<a name="l00200"></a>00200                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> y = minYPerX; y &lt;= maxYPerX ; y++)
<a name="l00201"></a>00201                 {
<a name="l00202"></a>00202                     byte minZPerXY = meshMargins.GetMinZPerXY(x,y);
<a name="l00203"></a>00203                     byte maxZPerXY = meshMargins.GetMaxZPerXY(x,y);
<a name="l00204"></a>00204                     
<a name="l00205"></a>00205                     byte minZPerXYnew = meshMargins.GetMinZPerXY(x,y);
<a name="l00206"></a>00206                     byte maxZPerXYnew = meshMargins.GetMaxZPerXY(x,y);
<a name="l00207"></a>00207                     
<a name="l00208"></a>00208                     <span class="keywordtype">bool</span> minZPerXYDirty = <span class="keyword">false</span>;
<a name="l00209"></a>00209                     
<a name="l00210"></a>00210                     <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> z = minZPerXY; z &lt;= maxZPerXY ; z++)
<a name="l00211"></a>00211                     {
<a name="l00212"></a>00212                         <span class="keywordtype">float</span> transformedX = Transform(x, translationRateX);
<a name="l00213"></a>00213                         <span class="keywordtype">float</span> transformedY = Transform(y, translationRateY);
<a name="l00214"></a>00214                         <span class="keywordtype">float</span> transformedZ = Transform(z, translationRateZ);
<a name="l00215"></a>00215                         
<a name="l00216"></a>00216                         <a class="code" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a> xyz = <a class="code" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a>(transformedX,transformedY,transformedZ);
<a name="l00217"></a>00217                         <a class="code" href="class_vector2_d.html" title="Vector2D is vector 2D representation.">Vector2D</a> xy = Project(xyz,sculpData-&gt;<a class="code" href="struct_sculpt_data.html#a8e0b65a79b5db9749813244ca6bfa280" title="projection matrix 3 * 4 in row leading order">projection</a>);
<a name="l00218"></a>00218                         VoxelStatus vStatus = isInMap(xy,sculpData-&gt;<a class="code" href="struct_sculpt_data.html#a48c707d42d0381649a1f1cc36967f6b5" title="map represents bw image in bitmap format">map</a>,sculpData-&gt;sizeXmap,sculpData-&gt;sizeYmap);
<a name="l00219"></a>00219 
<a name="l00220"></a>00220                         <span class="keywordflow">if</span>(vStatus == BLACK)
<a name="l00221"></a>00221                         {
<a name="l00222"></a>00222                             TurnOff(x,y,z);
<a name="l00223"></a>00223                             <span class="keywordflow">if</span>(!minXDirty) 
<a name="l00224"></a>00224                             {
<a name="l00225"></a>00225                                 minXnew = x;
<a name="l00226"></a>00226                             }
<a name="l00227"></a>00227                             <span class="keywordflow">if</span>(!minYPerXDirty)
<a name="l00228"></a>00228                             {
<a name="l00229"></a>00229                                 minYPerXnew = y;
<a name="l00230"></a>00230                             }
<a name="l00231"></a>00231                             <span class="keywordflow">if</span>(!minZPerXYDirty)
<a name="l00232"></a>00232                             {
<a name="l00233"></a>00233                                 minZPerXYnew = z;
<a name="l00234"></a>00234                             }
<a name="l00235"></a>00235                         }
<a name="l00236"></a>00236                         <span class="keywordflow">else</span> 
<a name="l00237"></a>00237                         {
<a name="l00238"></a>00238                             minXDirty = <span class="keyword">true</span>;
<a name="l00239"></a>00239                             minYPerXDirty = <span class="keyword">true</span>;
<a name="l00240"></a>00240                             minZPerXYDirty = <span class="keyword">true</span>;
<a name="l00241"></a>00241                             
<a name="l00242"></a>00242                             maxXnew = x;
<a name="l00243"></a>00243                             maxYPerXnew = y;
<a name="l00244"></a>00244                             maxZPerXYnew = z;
<a name="l00245"></a>00245                         }                        
<a name="l00246"></a>00246                         
<a name="l00247"></a>00247                     }
<a name="l00248"></a>00248                     meshMargins.SetMinZPerXY(x,y,minZPerXYnew);
<a name="l00249"></a>00249                     meshMargins.SetMaxZPerXY(x,y,maxZPerXYnew);
<a name="l00250"></a>00250                 }
<a name="l00251"></a>00251                 meshMargins.SetMinYPerX(x,minYPerXnew);
<a name="l00252"></a>00252                 meshMargins.SetMaxYPerX(x,maxYPerXnew); 
<a name="l00253"></a>00253             }
<a name="l00254"></a>00254             
<a name="l00255"></a>00255             meshMargins.SetMinX(minXnew);
<a name="l00256"></a>00256             meshMargins.SetMaxX(maxXnew);
<a name="l00257"></a>00257             
<a name="l00258"></a>00258         }
<a name="l00259"></a>00259         
<a name="l00260"></a>00260         <span class="keywordtype">void</span> SculpAccurate(<a class="code" href="struct_sculpt_data.html" title="The struct represents data to be sculped.">SculptData</a>* sculpData)
<a name="l00261"></a>00261         {
<a name="l00262"></a>00262             <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> x = 0; x &lt; Size; x++)
<a name="l00263"></a>00263             {
<a name="l00264"></a>00264                 <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> y = 0; y &lt; Size; y++)
<a name="l00265"></a>00265                 {
<a name="l00266"></a>00266                     <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> z = 0; z &lt; Size; z++)
<a name="l00267"></a>00267                     {
<a name="l00268"></a>00268                         <span class="keywordtype">float</span> transformedX = Transform(x, translationRateX);
<a name="l00269"></a>00269                         <span class="keywordtype">float</span> transformedY = Transform(y, translationRateY);
<a name="l00270"></a>00270                         <span class="keywordtype">float</span> transformedZ = Transform(z, translationRateZ);
<a name="l00271"></a>00271                         
<a name="l00272"></a>00272                         <a class="code" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a> xyz = <a class="code" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a>(transformedX,transformedY,transformedZ);
<a name="l00273"></a>00273                         <a class="code" href="class_vector2_d.html" title="Vector2D is vector 2D representation.">Vector2D</a> xy = Project(xyz,sculpData-&gt;<a class="code" href="struct_sculpt_data.html#a8e0b65a79b5db9749813244ca6bfa280" title="projection matrix 3 * 4 in row leading order">projection</a>);
<a name="l00274"></a>00274                         VoxelStatus vStatus = isInMap(xy,sculpData-&gt;<a class="code" href="struct_sculpt_data.html#a48c707d42d0381649a1f1cc36967f6b5" title="map represents bw image in bitmap format">map</a>,sculpData-&gt;sizeXmap,sculpData-&gt;sizeYmap);
<a name="l00275"></a>00275                         
<a name="l00276"></a>00276                         <span class="keywordflow">if</span>(vStatus == BLACK)
<a name="l00277"></a>00277                         {
<a name="l00278"></a>00278                             
<a name="l00279"></a>00279                             TurnOff(x,y,z);
<a name="l00280"></a>00280                         }
<a name="l00281"></a>00281                     }
<a name="l00282"></a>00282                 }
<a name="l00283"></a>00283             }
<a name="l00284"></a>00284         }
<a name="l00285"></a>00285 
<a name="l00286"></a>00286         <span class="keyword">inline</span> <span class="keywordtype">char</span> GetMin(<span class="keywordtype">char</span> min, SculptorMode mode)
<a name="l00287"></a>00287         {
<a name="l00288"></a>00288             <span class="keywordflow">return</span> mode == FAST ? min - TO_SHAPE_THRESHOLD : -1;
<a name="l00289"></a>00289             <span class="comment">//return 0;</span>
<a name="l00290"></a>00290         }
<a name="l00291"></a>00291         
<a name="l00292"></a>00292         <span class="keyword">inline</span> <span class="keywordtype">char</span> GetMax(<span class="keywordtype">char</span> max, SculptorMode mode)
<a name="l00293"></a>00293         {
<a name="l00294"></a>00294             <span class="keywordflow">return</span> mode == FAST ? max + TO_SHAPE_THRESHOLD : Size;
<a name="l00295"></a>00295             <span class="comment">//return Size - 1;</span>
<a name="l00296"></a>00296         }
<a name="l00297"></a>00297     
<a name="l00298"></a>00298         <span class="keyword">inline</span> <span class="keywordtype">void</span> BuildCell(<span class="keywordtype">char</span> x, <span class="keywordtype">char</span> y, <span class="keywordtype">char</span> z, <a class="code" href="struct_g_r_i_d_c_e_l_l.html" title="GRIDCELL represents 2*2*2 in grid.">GRIDCELL</a>* cell,SculptorMode mode)
<a name="l00299"></a>00299         {
<a name="l00300"></a>00300             <span class="keywordflow">for</span>(<span class="keywordtype">char</span> pointIndex = 0; pointIndex &lt; 8 ; pointIndex++)
<a name="l00301"></a>00301             {
<a name="l00302"></a>00302                 <span class="keywordtype">char</span> currentX =  x + pointOffsetArray[pointIndex][0];
<a name="l00303"></a>00303                 <span class="keywordtype">char</span> currentY =  y + pointOffsetArray[pointIndex][1];
<a name="l00304"></a>00304                 <span class="keywordtype">char</span> currentZ =  z + pointOffsetArray[pointIndex][2];
<a name="l00305"></a>00305                 
<a name="l00306"></a>00306                 <span class="keywordtype">float</span> transformedX = Transform(currentX, translationRateX);
<a name="l00307"></a>00307                 <span class="keywordtype">float</span> transformedY = Transform(currentY, translationRateY);
<a name="l00308"></a>00308                 <span class="keywordtype">float</span> transformedZ = Transform(currentZ, translationRateZ);
<a name="l00309"></a>00309                 
<a name="l00310"></a>00310                 cell-&gt;p[pointIndex] = <a class="code" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a>(transformedX,transformedY,transformedZ);
<a name="l00311"></a>00311                 
<a name="l00312"></a>00312                 
<a name="l00313"></a>00313                 byte minX = meshMargins.GetMinX();
<a name="l00314"></a>00314                 byte maxX = meshMargins.GetMaxX();
<a name="l00315"></a>00315                 byte minYPerX = meshMargins.GetMinYPerX(x);
<a name="l00316"></a>00316                 byte maxYPerX = meshMargins.GetMaxYPerX(x);
<a name="l00317"></a>00317                 byte minZPerXY = meshMargins.GetMinZPerXY(x,y);
<a name="l00318"></a>00318                 byte maxZPerXY = meshMargins.GetMaxZPerXY(x,y);
<a name="l00319"></a>00319                 
<a name="l00320"></a>00320                 <span class="keywordflow">if</span>(currentX &lt;= GetMin(minX, mode) || currentX &gt;= GetMax(maxX, mode) ||
<a name="l00321"></a>00321                         currentY &lt;= GetMin(minYPerX, mode) || currentY &gt;=  GetMax(maxYPerX, mode) ||
<a name="l00322"></a>00322                             currentZ &lt;= GetMin(minZPerXY, mode) || currentZ &gt;= GetMax(maxZPerXY, mode))
<a name="l00323"></a>00323                 
<a name="l00324"></a>00324                 {
<a name="l00325"></a>00325                     cell-&gt;val[pointIndex] = OUTSAHPE;
<a name="l00326"></a>00326                 }
<a name="l00327"></a>00327                 <span class="keywordflow">else</span>
<a name="l00328"></a>00328                 {
<a name="l00329"></a>00329                     cell-&gt;val[pointIndex] = IsOn(currentX,currentY,currentZ) ? INSHAPE : OUTSAHPE;
<a name="l00330"></a>00330                 }
<a name="l00331"></a>00331             }
<a name="l00332"></a>00332         }
<a name="l00333"></a>00333     
<a name="l00334"></a>00334         <span class="keyword">inline</span> <span class="keywordtype">float</span> Transform(<span class="keywordtype">char</span> pointIndex, <span class="keywordtype">float</span> translate)
<a name="l00335"></a>00335         {
<a name="l00336"></a>00336             <span class="keywordflow">return</span> pointIndex*scaleRate + translate;
<a name="l00337"></a>00337         }
<a name="l00338"></a>00338     
<a name="l00339"></a>00339                 <span class="keyword">inline</span> <span class="keywordtype">void</span> PoligolizeCell(<span class="keywordtype">char</span> x, <span class="keywordtype">char</span> y, <span class="keywordtype">char</span> z,SculptorMode mode)
<a name="l00340"></a>00340                 {
<a name="l00341"></a>00341                         <a class="code" href="struct_g_r_i_d_c_e_l_l.html" title="GRIDCELL represents 2*2*2 in grid.">GRIDCELL</a> cell;
<a name="l00342"></a>00342                         BuildCell(x,y,z,&amp;cell,mode);
<a name="l00343"></a>00343                         <a class="code" href="class_triangle.html" title="is triangle representation containes 3 points, normal of the triangle,and its edges">Triangle</a>** triangles = <span class="keyword">new</span> <a class="code" href="class_triangle.html" title="is triangle representation containes 3 points, normal of the triangle,and its edges">Triangle</a>*[5];
<a name="l00344"></a>00344                         <span class="keywordtype">int</span> numberOfTriangles = Polygonise(cell,1,triangles);
<a name="l00345"></a>00345                         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> triangelIndex = 0; triangelIndex &lt; numberOfTriangles ; triangelIndex++)
<a name="l00346"></a>00346                         {
<a name="l00347"></a>00347                                 mesh.<a class="code" href="class_mesh.html#afff4c09a59fd3ddc5df7f35a24ad37a7" title="Add triangle to the mesh.">AddTriangle</a>(triangles[triangelIndex]);
<a name="l00348"></a>00348                         }
<a name="l00349"></a>00349                         <span class="keyword">delete</span>(triangles);
<a name="l00350"></a>00350                 }
<a name="l00351"></a>00351 
<a name="l00352"></a>00352                 <span class="keyword">inline</span> <span class="keywordtype">void</span> TurnOn(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> y, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> z)
<a name="l00353"></a>00353                 {
<a name="l00354"></a>00354                         sculpture[x][y][z&gt;&gt;3] |= ( 1 &lt;&lt; (z &amp; 7));
<a name="l00355"></a>00355                 }
<a name="l00356"></a>00356 
<a name="l00357"></a>00357                 <span class="keyword">inline</span> <span class="keywordtype">void</span> TurnOff(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> y, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> z)
<a name="l00358"></a>00358                 {
<a name="l00359"></a>00359                         sculpture[x][y][z&gt;&gt;3] &amp;= ~( 1 &lt;&lt; (z &amp; 7));
<a name="l00360"></a>00360                 }
<a name="l00361"></a>00361 
<a name="l00362"></a>00362                 <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> IsOn(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> y, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> z)
<a name="l00363"></a>00363                 {
<a name="l00364"></a>00364                         <span class="keywordflow">return</span> sculpture[x][y][z&gt;&gt;3] &amp; ( 1 &lt;&lt; (z &amp; 7));
<a name="l00365"></a>00365                 }
<a name="l00366"></a>00366 
<a name="l00367"></a>00367                 <span class="keyword">inline</span> <a class="code" href="class_vector2_d.html" title="Vector2D is vector 2D representation.">Vector2D</a> Project(<a class="code" href="class_vector3_d_ex.html" title="Vector3DEx is extendex Vector3D: needed for performance improval its lenght calculated only once on c...">Vector3DEx</a>&amp; vector,<span class="keywordtype">float</span> projection[3*4])
<a name="l00368"></a>00368                 {
<a name="l00369"></a>00369             <span class="keywordtype">float</span> x = vector.getX() * GetProjectionCell(projection,0,0) + 
<a name="l00370"></a>00370                       vector.getY() * GetProjectionCell(projection,0,1) + 
<a name="l00371"></a>00371                       vector.getZ() * GetProjectionCell(projection,0,2) +  
<a name="l00372"></a>00372                       1             * GetProjectionCell(projection,0,3);
<a name="l00373"></a>00373 
<a name="l00374"></a>00374                         <span class="keywordtype">float</span> y = vector.getX() * GetProjectionCell(projection,1,0) + 
<a name="l00375"></a>00375                       vector.getY() * GetProjectionCell(projection,1,1) + 
<a name="l00376"></a>00376                       vector.getZ() * GetProjectionCell(projection,1,2) +  
<a name="l00377"></a>00377                       1             * GetProjectionCell(projection,1,3);
<a name="l00378"></a>00378 
<a name="l00379"></a>00379                         <span class="keywordtype">float</span> z = vector.getX() * GetProjectionCell(projection,2,0) + 
<a name="l00380"></a>00380                       vector.getY() * GetProjectionCell(projection,2,1) + 
<a name="l00381"></a>00381                       vector.getZ() * GetProjectionCell(projection,2,2) + 
<a name="l00382"></a>00382                       1             * GetProjectionCell(projection,2,3);
<a name="l00383"></a>00383 
<a name="l00384"></a>00384                         <span class="keywordflow">return</span> <a class="code" href="class_vector2_d.html" title="Vector2D is vector 2D representation.">Vector2D</a>(x/z,y/z);
<a name="l00385"></a>00385                 }
<a name="l00386"></a>00386 
<a name="l00387"></a>00387                 <span class="keyword">inline</span> VoxelStatus isInMap(<a class="code" href="class_vector2_d.html" title="Vector2D is vector 2D representation.">Vector2D</a>&amp; xy,<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>* _map, <span class="keywordtype">size_t</span> sizeX, <span class="keywordtype">size_t</span> sizeY)
<a name="l00388"></a>00388                 {
<a name="l00389"></a>00389             <span class="keywordtype">int</span> x = (int)xy.getX();
<a name="l00390"></a>00390             <span class="keywordtype">int</span> y = (int)xy.getY();
<a name="l00391"></a>00391             <span class="comment">//if (x &lt; 1 || x &gt; sizeX || y &lt; 1 || y &gt; sizeY)</span>
<a name="l00392"></a>00392             <span class="keywordflow">if</span> (x &lt; 0 || x &gt;= sizeX || y &lt; 0 || y &gt;= sizeY)
<a name="l00393"></a>00393             {
<a name="l00394"></a>00394                 <span class="comment">//NSLog(@&quot;index is OUtside !!!!&quot;);</span>
<a name="l00395"></a>00395                 <span class="keywordflow">return</span> OUTSIDE;
<a name="l00396"></a>00396                 
<a name="l00397"></a>00397             }
<a name="l00398"></a>00398             
<a name="l00399"></a>00399                         <span class="keywordtype">int</span> index = x + (sizeX) * y;
<a name="l00400"></a>00400             
<a name="l00401"></a>00401             <span class="comment">//TODO remove </span>
<a name="l00402"></a>00402             <span class="keywordflow">if</span> (index &lt; 0)
<a name="l00403"></a>00403             {
<a name="l00404"></a>00404                 <span class="comment">//NSLog(@&quot;index is negative !!!!&quot;);</span>
<a name="l00405"></a>00405             }
<a name="l00406"></a>00406             
<a name="l00407"></a>00407             <span class="keywordflow">if</span> (_map[index] == 0 || _map[index] == BLUE)
<a name="l00408"></a>00408             {
<a name="l00409"></a>00409                 <span class="comment">//NSLog(@&quot;index is black !!!!&quot;);</span>
<a name="l00410"></a>00410                 _map[index] = BLUE;
<a name="l00411"></a>00411                 <span class="keywordflow">return</span> BLACK;
<a name="l00412"></a>00412             }
<a name="l00413"></a>00413             <span class="comment">//NSLog(@&quot;index is White !!!!&quot;);</span>
<a name="l00414"></a>00414             _map[index] = RED;
<a name="l00415"></a>00415             <span class="keywordflow">return</span> WHITE;
<a name="l00416"></a>00416                 }
<a name="l00417"></a>00417     
<a name="l00418"></a>00418         <span class="keyword">inline</span> <span class="keywordtype">float</span> GetProjectionCell(<span class="keywordtype">float</span> projection[3*4], <span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y)
<a name="l00419"></a>00419         {
<a name="l00420"></a>00420             <span class="keywordtype">float</span> result =  projection[4*x + y];
<a name="l00421"></a>00421             <span class="keywordflow">return</span> result;
<a name="l00422"></a>00422         }
<a name="l00423"></a>00423     
<a name="l00424"></a>00424         <span class="keyword">inline</span> <a class="code" href="class_vector3_d.html" title="Vector3D is vector 3D representation.">Vector3D</a> GetVectorPosition(byte x, byte y, byte z)
<a name="l00425"></a>00425         {
<a name="l00426"></a>00426             <span class="keywordflow">return</span> <a class="code" href="class_vector3_d.html" title="Vector3D is vector 3D representation.">Vector3D</a>(Transform(x,translationRateX),Transform(y,translationRateY),Transform(z,translationRateZ));
<a name="l00427"></a>00427         }
<a name="l00428"></a>00428         <span class="keyword">inline</span> <a class="code" href="struct_vertex3_d.html" title="struct that represents Vertex in 3D, location, normal and color of the point">Vertex3D</a> GetVertexPosition(byte x, byte y, byte z, <span class="keywordtype">float</span> transpancy)
<a name="l00429"></a>00429         {
<a name="l00430"></a>00430             <a class="code" href="class_vector3_d.html" title="Vector3D is vector 3D representation.">Vector3D</a> position = GetVectorPosition(x,y,z);
<a name="l00431"></a>00431             <a class="code" href="struct_color_r_g_b.html" title="Represens color in RGBT format.">ColorRGB</a> color = {255,0,0,transpancy};
<a name="l00432"></a>00432             <span class="keywordflow">return</span> <a class="code" href="struct_vertex3_d.html" title="struct that represents Vertex in 3D, location, normal and color of the point">Vertex3D</a>(position,color,position);
<a name="l00433"></a>00433         }
<a name="l00434"></a>00434 
<a name="l00435"></a>00435         
<a name="l00436"></a>00436 };
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Properties</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Friends</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated on Wed Nov 30 2011 17:10:14 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.5.1
</small></address>

</body>
</html>
